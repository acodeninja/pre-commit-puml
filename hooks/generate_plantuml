#!/usr/bin/env python3

import logging
import subprocess
from os import mkdir, getcwd
from os.path import exists, dirname, join
from shutil import move
import argparse
from pathlib import Path
from tempfile import TemporaryDirectory
from urllib.request import urlretrieve

__PLANTUML_VERSION__ = "1.2022.5"
__PLANTUML_JARFILE__ = f".plantuml-{__PLANTUML_VERSION__}.jar"


def has_plantuml():
    return exists(__PLANTUML_JARFILE__)


def fetch_plantuml():
    plantuml_download_url = f"https://github.com/plantuml/plantuml/releases/download/v{__PLANTUML_VERSION__}/plantuml-{__PLANTUML_VERSION__}.jar"
    logging.debug(f"Downloading PlantUML from {plantuml_download_url}")
    urlretrieve(plantuml_download_url, __PLANTUML_JARFILE__)


def get_output_directory(output_directory, file_path):
    logging.debug(f"getting output directory for {file_path}")
    if output_directory == '@':
        finalised_output_directory = dirname(join(getcwd(), file_path))
        logging.debug(f'output directory for {file_path} is same as diagram {finalised_output_directory}')
        return finalised_output_directory

    finalised_output_directory = join(getcwd(), output_directory)
    logging.debug(f"output directory for {file_path} is project relative {finalised_output_directory}")
    return finalised_output_directory


def create_diagram(source, output_directory, extension):
    logging.debug(f"started diagramming {source}")
    subprocess.call([
        'java',
        '-jar',
        __PLANTUML_JARFILE__,
        f'-T{extension}',
        '-o', output_directory,
        source
    ])
    logging.debug(f"finished diagramming {source}")


def is_file_unchanged(existing, proposed):
    logging.debug(f"comparing files {existing}, and {proposed}")
    with open(existing, 'r') as existing_file:
        existing_file_contents = existing_file.read().replace('\n', '')
        with open(proposed, 'r') as proposed_file:
            proposed_file_contents = proposed_file.read().replace('\n', '')

            logging.debug(f"found{' no' if existing_file_contents == proposed_file_contents else ''} changes between {existing} and {proposed}")

            return existing_file_contents == proposed_file_contents


def process_file(output_directory, output_extension, source):
    output_location = get_output_directory(output_directory, source)
    output_filename = f"{Path(source).stem}.{output_extension}"

    if not exists(output_location):
        logging.debug("output directory did not exist, creating")
        mkdir(output_location)

    if exists(f"{output_location}/{output_filename}"):
        with TemporaryDirectory() as temporary_directory:
            create_diagram(source, temporary_directory, output_extension)

            file_unchanged = is_file_unchanged(
                f"{output_location}/{output_filename}",
                f"{temporary_directory}/{output_filename}",
            )

            if not file_unchanged:
                move(f"{output_location}/{output_filename}", f"{temporary_directory}/{output_filename}")
                logging.info(f"Fixing {source}")

            return file_unchanged
    else:
        create_diagram(source, output_location, output_extension)
        return False


def hook(output_directory, output_extension, file_paths):
    if not has_plantuml():
        fetch_plantuml()

    logging.debug(f"running hook with {output_directory}, {output_extension}, {file_paths}")

    files_unchanged = []

    for file_path in file_paths:
        files_unchanged.append(process_file(output_directory, output_extension, file_path))

    return any(files_unchanged)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='PlantUML Generator Hook')
    parser.add_argument('--output-directory', default="./images")
    parser.add_argument('--output-extension', default="svg")
    parser.add_argument('--logging-level', default='INFO')
    parser.add_argument('file_paths', nargs="+")

    args = parser.parse_args()

    logging.basicConfig(
        format="[%(levelname)s]: %(message)s",
        level=logging.getLevelName(args.logging_level)
    )

    logging.debug(f"parsed arguments {args}")

    no_changes = hook(
        output_directory=args.output_directory,
        output_extension=args.output_extension,
        file_paths=args.file_paths,
    )

    if not no_changes:
        exit(1)
